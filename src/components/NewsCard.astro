---
import NewsEntry from "../components/NewsEntry.astro";
import { getCollection } from 'astro:content';
import { aoeDate } from "../logic/time";
import { compareDesc, subMonths } from 'date-fns';
import type { CollectionEntry } from "astro:content";
import CardTitle from "./CardTitle.astro";

const cutoffDate = subMonths(new Date(), 18);
const rawNews = await getCollection("news", (entry) => compareDesc(cutoffDate, entry.data.date) >= 0);

const groupedNews = Object.entries(rawNews)
  .sort(([, a], [, b]) => compareDesc(a.data.date, b.data.date))
  .reduce((groups, [key, entry]) => {
    const year = entry.data.date.getFullYear();
    if (!groups[year]) {
      groups[year] = [];
    }
    groups[year].push([key, entry]);
    return groups;
  }, {} as Record<number, [string, CollectionEntry<"news">][]>);
---

<section
  id="news"
  data-nav="news"
  class="card flex flex-col gap-2"
>
  <CardTitle icon="i-mdi:bullhorn" title="News" />
  <div class="card-news">
    {
      Object
        .entries(groupedNews)
        .sort(([a], [b]) => Number.parseInt(b) - Number.parseInt(a))
        .map(([year, news]) => (
        <section class="contents">
          <h3>{year}</h3>
          {news.map(([key, { body, data: { date, icon } }]) => (
            <NewsEntry key={key} date={date} content={body} icon={icon} />
          ))}
        </section>
      ))
    }
  </div>
  <script>
    const newsRoot = document.getElementById("news")!;
    const newsEntries = newsRoot.querySelectorAll("article");
    const now = new Date();
    newsEntries.forEach(entry => {
      const dateStr = entry.dataset.date;
      if (dateStr) {
        const date = new Date(dateStr);
        if (date > now) {
          entry.classList.add("news-future");
        } else {
          entry.classList.add("news-past");
        }
      }
    });
  </script>
</section>

<style>
.card-news {
  display: grid;
  grid-template-columns: auto auto 1fr;
  align-items: start;
  gap: 0.25rem 0.5rem;

  & h3 {
    grid-column: span 3;
    font-size: 1.125rem;
    font-weight: bold;

    &:not(:first-child) {
      margin: 0.5rem 0;
    }
  }
}

:global(#news .news-future) {
  time, .news-icon {
    @apply text-bright;
  }

  time {
    font-weight: bold;
  }

  .news-content {
    @apply text-emph;
  }
}
</style>
